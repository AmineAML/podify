{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Show/Show.js","components/ShowList/ShowList.js","components/SearchResults/SearchResults.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","handleTermChange","bind","search","handleEnter","event","this","setState","target","value","onSearch","keyCode","className","placeholder","onChange","onKeyUp","onClick","React","Component","Show","width","show","image","height","src","url","name","description","ShowList","shows","map","SearchResults","searchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","id","images","uri","App","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a64084bb.chunk.js","sourcesContent":["const clientId = \"2cf9cbd3a9374bdda11c1820cf0fa811\"; // Have to replace it with your clientId\r\nconst redirectUri = \"http://localhost:3000/\"; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\r\nlet accessToken;\r\n \r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n \r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\"); // This clears the parameters, allowing us to get a new access token when it expires.\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n \r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?q=${term}&type=show`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    })\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(jsonResponse => {\r\n        if (!jsonResponse.shows) {\r\n          return [];\r\n        }\r\n        return jsonResponse.shows.items.map(show => ({\r\n          id: show.id,\r\n          name: show.name,\r\n          description: show.description,\r\n          image: show.images[2],\r\n          uri: show.uri\r\n        }));\r\n      });\r\n  },\r\n};\r\n \r\nexport default Spotify;","import React from \"react\";\r\n \r\nimport \"./SearchBar.css\";\r\n \r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n \r\n    this.state = {\r\n      term: \"\"\r\n    };\r\n \r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.handleEnter = this.handleEnter.bind(this);\r\n  }\r\n \r\n  handleTermChange(event) {\r\n    this.setState({ term: event.target.value });\r\n  }\r\n \r\n  search() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n \r\n  handleEnter(event) {\r\n    if (event.keyCode === 13) {\r\n      this.search();\r\n    }\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input\r\n          placeholder=\"Enter show\"\r\n          onChange={this.handleTermChange}\r\n          onKeyUp={this.handleEnter}\r\n        />\r\n        <button className=\"SearchButton\" onClick={this.search}>\r\n          SEARCH\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default SearchBar;","import React from \"react\";\r\n \r\nimport \"./Show.css\";\r\n \r\nclass Show extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <div className=\"Show\">\r\n        <div className=\"Show-information\">\r\n          <img className=\"Show-image\" width={this.props.show.image.width} height={this.props.show.image.height} src={this.props.show.image.url}/>\r\n          <h3>{this.props.show.name}</h3>\r\n            <p>\r\n              {this.props.show.description}\r\n            </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Show;\r\n","import React from \"react\";\r\n \r\nimport \"./ShowList.css\";\r\n \r\nimport Show from \"../Show/Show\";\r\n \r\nclass ShowList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"ShowList\">\r\n        {this.props.shows.map(show => {\r\n          return (\r\n            <Show\r\n              show={show}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default ShowList;","import React from \"react\";\r\n \r\nimport \"./SearchResults.css\";\r\n \r\nimport ShowList from \"../ShowList/ShowList\";\r\n \r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <ShowList shows={this.props.searchResults} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default SearchResults;","import React from \"react\";\nimport \"./App.css\";\n \nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Spotify from \"../../util/Spotify\";\n \nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      searchResults: [],\n    };\n \n    this.search = this.search.bind(this);\n  }\n \n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n \n  render() {\n    return (\n      <div>\n        <h1>\n          <a href=\"http://localhost:3000\">Podify</a>\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}